#compdef port

_port()
{
    _arguments \
        '-v[verbose mode (generate verbose messages)]' \
        '-d[debug mode (generate debugging messages)]' \
        '-q[quiet mode (suppress messages)]' \
        '-n[dont follow dependencies in upgrade (only for upgrading)]' \
        "-R[also upgrade dependents (only affects upgrade)]" \
        '-u[uninstall non-active ports when upgrading and uninstalling]' \
        '-f[force mode (ignore state file)]' \
        '-o[honor state files older than Portfile]' \
        '-s[source-only mode]' \
        '-b[binary-only mode]' \
        '-c[autoclean mode (execute clean after install)]' \
        '-k[keep mode (do not autoclean after install)]' \
        '-D[specify portdir]' \
        '-F[Read and process the file of commands specified by the argument]' \
        '-p[Despite any errors encountered, proceed to process multiple ports and commands]' \
        '-y[Perform a dry run]' \
        '-t[enable trace mode debug facilities on platforms that support it (Mac OS X)]' \
        '*::command:_port_command'
}

(( $+functions[_port_command()] )) || _port_command()
{
    local _portcmds

    _portcmds=(
        'activate:Activate the installed portname'
        'archive:Archive the port for a later unarchive'
        'build:Build portname'
        'cat:Concatenates and prints the contents of Portfile on stdout'
        'cd:Changes the current working directory to the one containing portname'
        'checksum:Compute the checksums of the distribution files for portname, and compare them to the checksums listed in Portfile'
        'clean:Clean the files used for building portname'
        'configure:Runs any configure process for portname'
        'contents:Lists the files installed by portname'
        'deactivate:Deactivate the installed portname'
        'dependents:Lists the installed ports that depend on the port portname'
        'deps:Lists the other ports that are required to build and run portname'
        'destroot:Installs portname to a temporary directory'
        'dir:Displays the path to the directory containing portname'
        "distcheck:Check if the distfiles haven't changed and can be fetched"
        'distfiles:Display each distfile, its checksums, and the URLs used to fetch it'
        'dmg:Creates an internet-enabled disk image containing an OS X package of portname'
        'dpkg:Creates a DEB binary package of portname'
        'echo:Writes to stdout the arguments passed to port'
        {"ed","edit"}":Opens Portfile with your default editor specified in your shell's environment variable"
        'extract:Extracts the distribution files for portname'
        'fetch:Fetches the distribution files required to build portname'
        'file:Displays the path to the Portfile for portname'
        'gohome:Loads the home page for the given portname in the default web browser'
        'help:Displays a summary of all available actions and port command syntax on stdout'
        'info:Displays meta-information available for portname'
        'install:Install and activate portname'
        'installed:Show the installed versions and variants for portname'
        'lint:Verifies Portfile for portname'
        'list:Display a list of the latest version of each/all port'
        "livecheck:Check if the software hasn't been updated since the Portfile was last modified"
        'location:Print the install location of a given port'
        "load:Provides a shortcut to using launchctl to load a port's daemon (as installed in /Library/LaunchDaemons)"
        'log:Parses and shows log files for portname'
        'mdmg:Creates an internet-enabled disk image containing an OS X metapackage of portname and its dependencies'
        'mirror:Create/update a local mirror of distfiles used for ports given on the command line'
        'mpkg:Creates an OS X installer metapackage of portname and its dependencies'
        'notes:Displays notes for portname (useful information concerning setup and use of the port)'
        'outdated:List the installed ports that need upgrading'
        "patch:Applies any required patches to portname's extracted distribution files"
        'pkg:Creates an OS X installer package of portname'
        'platform:Display the platform information for the current system'
        'provides:Determines which port owns a given file and can take either a relative or absolute path'
        'rdependents:Recursively lists the installed ports that depend on the port portname'
        'rdeps:Recursively lists the other ports that are required to build and run portname'
        'rpm:Creates an RPM binary package of portname, similar to a tgz "archive"'
        'search:Search for an available port'
        'selfupdate:Updates the MacPorts system, ports tree(s) and base tools if needed'
        'setrequested:Mark portname as requested'
        'srpm:Creates a SRPM source package of portname, similar to a xar "portpkg"'
        'sync:Performs a sync operation only on the ports tree of a MacPorts installation'
        'test:Tests portname'
        'unarchive:Unpack the port from a pre-built binary archive'
        'uninstall:Deactivate and uninstall portname'
        'unload:A shortcut to launchctl, like load, but unloads the daemon'
        'unsetrequested:Mark portname as unrequested'
        'upgrade:The upgrade target works on a port and its dependencies'
        'url:Displays the URL for the path of the given portname, which can be passed as port-url'
        'usage:Displays a condensed usage summary'
        'variants:Lists the build variants available for portname'
        'version:Display the release number of the installed MacPorts infrastructure'
        'work:Displays the path to the work directory for portname'
    )

    if (( CURRENT == 1 )); then
        # Display port commands.
        _describe -t commands 'port command' _portcmds || compadd "$@"
    else
        local curcontext="${curcontext}"

        # Get command name if inputted command is included in `_portcmds`;
        # otherwise empty value
        cmd="${_portcmds[(r)$words[1]:*]%%:*}"

        case $cmd in
            ed)
                cmd="edit"
            ;;
        esac

        if [[ -n $cmd ]]; then
            curcontext="${curcontext%:*:*}:port-${cmd}:"

            local update_policy
            zstyle -s ":completion:${curcontext}:" cache-policy update_policy
            if [[ -z "${update_policy}" ]]; then
                zstyle ":completion:${curcontext}:" cache-policy _port_caching_policy
            fi

            # Load pseudo portnames
            _port_pseudo_portnames

            # Select versions
            if (( CURRENT >= 3 )); then
                local current_word="$words[CURRENT]"
                if [[ $current_word[1] == '@' ]]; then
                    local port="$words[2]"
                    _port_installed_ports
                    versions=( `for v in $_installed_ports; do; echo $v; done | grep "${port}@" | sed -e 's/^.*@/@/'` )
                    _describe -t version 'port version' versions || compadd "$@"
                    return
                fi
            fi

            _call_function ret _port_$cmd || _message "no more arguments"
        else
            _message "unknown port command: $words[1]"
        fi
        return ret
    fi
}

_port_caching_policy()
{
    local oldp
    oldp=( "$1"(mw+1) )
    (( $#oldp )) && return 0

    if [[ "$1" -ot /opt/local/var/macports/sources/rsync.macports.org/release/ports/PortIndex ]]; then
        return 0
    fi

    case "${1##*/}" in
        ALL_PORTS)
        ;;
        *)
            if [[ "$1" -ot /opt/local/var/macports/software ]]; then
                return 0
            fi
        ;;
    esac

    return 1
}

_port_pseudo_portnames()
{
    _port_common_options=(
        'all'
        'current'
        'active'
        'inactive'
        'installed'
        'uninstalled'
        'outdated'
        'obsolete'
        'requested'
        'unrequested'
        'leaves'
    )
}

_port_all_ports()
{
    if ( [[ ${+_all_ports} -eq 0 ]] || _cache_invalid ALL_PORTS) && ! _retrieve_cache ALL_PORTS; then
        _all_ports=( $(port echo all 2> /dev/null) $_port_common_options )
        _store_cache ALL_PORTS _all_ports
    fi
}

_port_installed_ports()
{
    if ( [[ ${+_installed_ports} -eq 0 ]] || _cache_invalid INSTALLED_PORTS) && ! _retrieve_cache INSTALLED_PORTS; then
        _installed_ports=( $(port echo installed 2> /dev/null | awk '{print $1 $2}') $_port_common_options )
        _store_cache INSTALLED_PORTS _installed_ports
    fi
}

_port_outdated_ports()
{
    if ( [[ ${+_outdated_ports} -eq 0 ]] || _cache_invalid OUTDATED_PORTS ) && ! _retrieve_cache OUTDATED_PORTS; then
        _outdated_ports=( $(port echo outdated 2> /dev/null | awk '{print $1}') $_port_common_options )
        _store_cache OUTDATED_PORTS _outdated_ports
    fi
}

_port_active_ports()
{
    if ( [[ ${+_active_ports} -eq 0 ]] || _cache_invalid ACTIVE_PORTS) && ! _retrieve_cache ACTIVE_PORTS; then
        _active_ports=( $(port echo active 2> /dev/null | awk '{print $1 $2}') $_port_common_options )
        _store_cache ACTIVE_PORTS _active_ports
    fi
}

_port_inactive_ports()
{
    if ( [[ ${+_inactive_ports} -eq 0 ]] || _cache_invalid INACTIVE_PORTS) && ! _retrieve_cache INACTIVE_PORTS; then
        _inactive_ports=( $(port echo inactive 2> /dev/null | awk '{print $1 $2}') $_port_common_options )
        _store_cache INACTIVE_PORTS _inactive_ports
    fi
}

(( $+functions[_port_activate] )) || _port_activate()
{
    _port_inactive_ports
    compadd "$@" -a -- _inactive_ports
}

(( $+functions[_port_build] )) || _port_build()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_cat] )) || _port_cat()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_cd] )) || _pord_cd()
{
    _port_installed_ports
    compadd "$@" -a -- _installed_ports
}

(( $+functions[_port_checksum])) || _port_checksum()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_clean] )) || _port_clean()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_configure] )) || _port_configure()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_contents] )) || _port_contents()
{
    _port_active_ports
    compadd "$@" -a -- _active_ports
}

(( $+functions[_port_deactivate] )) || _port_deactivate()
{
    _port_active_ports
    compadd "$@" -a -- _active_ports
}

(( $+functions[_port_dependents] )) || _port_dependents()
{
    _port_installed_ports
    compadd "$@" -a -- _installed_ports
}

(( $+functions[_port_deps] )) || _port_deps()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_destroot] )) || _port_destroot()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_dir] )) || _port_dir()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_distcheck] )) || _port_distcheck()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_distfiles] )) || _port_distfiles()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_dmg] )) || _port_dmg()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_dpkg] )) || _port_dpkg()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_edit] )) || _port_edit()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_extract] )) || _port_extract()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_fetch] )) || _port_fetch()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_file] )) || _port_file()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_gohome] )) || _port_gohome()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_info] )) || _port_info()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_install] )) || _port_install()
{
    if (( CURRENT >= 3 )); then
        local inputting_word
        inputting_word="${words[$#words]}"
        if (( $#inputting_word >= 1 )) && [[ ${inputting_word[1]} == '+' ]]; then
            local installing_port
            installing_port="$words[2]"
            _current_port_variants=( $(port variants ${installing_port} 2> /dev/null | grep '^.\+: .\+$' | sed -e 's/^ *\(\[.*\]\)*\(.*\):.*$/+\2/g') )
            compadd "$@" -a -- _current_port_variants
            return
        fi
    fi

    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_installed] )) || _port_installed()
{
    _port_installed_ports
    compadd "$@" -a -- _installed_ports
}

(( $+functions[_port_lint] )) || _port_lint()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_list] )) || _port_list()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_livecheck] )) || _port_livecheck()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_location] )) || _port_location()
{
    _port_installed_ports
    compadd "$@" -a -- _installed_ports
}

(( $+functions[_port_load] )) || _port_load()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_log] )) || _port_log()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}


(( $+functions[_port_mdmg] )) || _port_mdmg()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_mirror] )) || _port_mirror()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_mpkg] )) || _port_mpkg()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_notes] )) || _port_notes()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_ports_outdated] )) || _port_outdated()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_ports_patch] )) || _port_patch()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_pkg] )) || _port_pkg()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_provides] )) || _port_provides()
{
    _files
}

(( $+functions[_port_rdependents] )) || _port_rdependents()
{
    _port_installed_ports
    compadd "$@" -a -- _installed_ports
}

(( $+functions[_port_rdeps] )) || _port_rdeps()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_rpm] )) || _port_rpm()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_setrequested] )) || _port_setrequested()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_srpm] )) || _port_srpm()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_test] )) || _port_test()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_uninstall] )) || _port_uninstall()
{
    _arguments \
        '--follow-dependents[recursively uninstall all dependents of this port]' \
        '*:ports:_port_uninstall_ports'
}

(( $+functions[_port_uninstall_ports] )) || _port_uninstall_ports()
{
    _port_installed_ports
    compadd "$@" -a -- _installed_ports
}

(( $+functions[_port_unload] )) || _port_unload()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_unsetrequested] )) || _port_unsetrequested()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_upgrade] )) || _port_upgrade()
{
    _port_outdated_ports
    compadd "$@" -a -- _outdated_ports
}

(( $+functions[_port_url] )) || _port_url()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_variants] )) || _port_variants()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

(( $+functions[_port_work] )) || _port_work()
{
    _port_all_ports
    compadd "$@" -a -- _all_ports
}

_port "$@"
